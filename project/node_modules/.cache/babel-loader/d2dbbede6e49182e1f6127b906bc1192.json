{"ast":null,"code":"var _jsxFileName = \"/Users/yankogeorgiev/GitHub/ReactSoftuni/project/src/contexts/MovieContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer, useEffect } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport * as movieService from '../services/movieService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MovieContext = /*#__PURE__*/createContext();\n\nconst movieReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_MOVIES':\n      return action.payload.map(x => ({ ...x\n      }));\n\n    case 'ADD_MOVIE':\n      return [...state, action.payload];\n\n    case 'FETCH_MOVIE_DETAILS':\n    case 'EDIT_MOVIE':\n      return state.map(x => x._id === action.movieId ? action.payload : x);\n\n    case 'REMOVE_MOVIE':\n      return state.filter(x => x._id !== action.movieId);\n\n    default:\n      return state;\n  }\n};\n\nexport const MovieProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const navigate = useNavigate();\n  const [movies, dispatch] = useReducer(movieReducer, []);\n  useEffect(() => {\n    movieService.getAll().then(result => {\n      const action = {\n        type: 'ADD_MOVIES',\n        payload: result\n      };\n      dispatch(action);\n    });\n  }, []);\n\n  const selectMovie = movieId => {\n    return movies.find(x => x._id === movieId) || {};\n  };\n\n  const fetchMovieDetails = (movieId, movieDetails) => {\n    dispatch({\n      type: 'FETCH_MOVIE_DETAILS',\n      payload: movieDetails,\n      movieId\n    }); // setGames(state => {\n    //     const game = state.find(x => x._id == gameId);\n    //     const comments = game.comments || [];\n    //     comments.push(comment)\n    //     return [\n    //         ...state.filter(x => x._id !== gameId),\n    //         { ...game, comments },\n    //     ];\n    // });\n  };\n\n  const movieAdd = movieData => {\n    dispatch({\n      type: 'ADD_MOVIE',\n      payload: movieData\n    });\n    navigate('/catalog');\n  };\n\n  const movieEdit = (movieId, movieData) => {\n    dispatch({\n      type: 'EDIT_MOVIE',\n      payload: movieData,\n      movieId\n    });\n  };\n\n  const movieRemove = movieId => {\n    dispatch({\n      type: 'REMOVE_MOVIE',\n      movieId\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(MovieContext.Provider, {\n    value: {\n      movies,\n      movieAdd,\n      movieEdit,\n      fetchMovieDetails,\n      selectMovie,\n      movieRemove\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MovieProvider, \"wwobjA7BLRArHkNqpstW2Xo7UNk=\", false, function () {\n  return [useNavigate];\n});\n\n_c = MovieProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieProvider\");","map":{"version":3,"names":["createContext","useReducer","useEffect","useNavigate","movieService","MovieContext","movieReducer","state","action","type","payload","map","x","_id","movieId","filter","MovieProvider","children","navigate","movies","dispatch","getAll","then","result","selectMovie","find","fetchMovieDetails","movieDetails","movieAdd","movieData","movieEdit","movieRemove"],"sources":["/Users/yankogeorgiev/GitHub/ReactSoftuni/project/src/contexts/MovieContext.js"],"sourcesContent":["import { createContext, useReducer, useEffect } from \"react\";\nimport { useNavigate } from 'react-router-dom';\n\nimport * as movieService from '../services/movieService';\n\nexport const MovieContext = createContext();\n\nconst movieReducer = (state, action) => {\n    switch (action.type) {\n        case 'ADD_MOVIES':\n            return action.payload.map(x => ({ ...x}));\n        case 'ADD_MOVIE':\n            return [...state, action.payload];\n        case 'FETCH_MOVIE_DETAILS':\n        case 'EDIT_MOVIE':\n            return state.map(x => x._id === action.movieId ? action.payload : x);\n        case 'REMOVE_MOVIE':\n            return state.filter(x => x._id !== action.movieId);\n        default:\n            return state;\n    }\n};\n\nexport const MovieProvider = ({\n    children,\n}) => {\n    const navigate = useNavigate();\n    const [movies, dispatch] = useReducer(movieReducer, []);\n\n    useEffect(() => {\n        movieService.getAll()\n            .then(result => {\n                const action = {\n                    type: 'ADD_MOVIES',\n                    payload: result\n                };\n\n                dispatch(action);\n            });\n    }, []);\n\n    const selectMovie = (movieId) => {\n        return movies.find(x => x._id === movieId) || {};\n    };\n\n    const fetchMovieDetails = (movieId, movieDetails) => {\n        dispatch({\n            type: 'FETCH_MOVIE_DETAILS',\n            payload: movieDetails,\n            movieId,\n        })\n    \n        // setGames(state => {\n        //     const game = state.find(x => x._id == gameId);\n\n        //     const comments = game.comments || [];\n        //     comments.push(comment)\n\n        //     return [\n        //         ...state.filter(x => x._id !== gameId),\n        //         { ...game, comments },\n        //     ];\n        // });\n    };\n\n    const movieAdd = (movieData) => {\n        dispatch({\n            type: 'ADD_MOVIE',\n            payload: movieData,\n        })\n\n        navigate('/catalog');\n    };\n\n    const movieEdit = (movieId, movieData) => {\n        dispatch({\n            type: 'EDIT_MOVIE',\n            payload: movieData,\n            movieId,\n        });\n    };\n\n    const movieRemove = (movieId) => {\n        dispatch({\n            type: 'REMOVE_MOVIE',\n            movieId\n        })\n    }\n    return (\n        <MovieContext.Provider value={{\n            movies,\n            movieAdd,\n            movieEdit,\n            fetchMovieDetails,\n            selectMovie,\n            movieRemove\n        }}>\n            {children}\n        </MovieContext.Provider>\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}